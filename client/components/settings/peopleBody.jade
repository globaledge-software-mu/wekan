template(name="people")
  .setting-content
    unless currentUser.isAuthorised
      | {{_ 'error-notAuthorized'}}
    else
      .content-title.ext-box
        .ext-box-left
        .ext-box-right
          span {{_ 'people-number'}} #{peopleNumber}
      .content-body
        .side-menu
          ul
            li.active
              a.js-setting-menu(data-id="people-setting") {{_ 'people'}}
            if currentUser.isAdmin
              li.active
                a.js-setting-menu(data-id="roles-setting") {{_ 'roles'}}
              li.active
                a.js-setting-menu(data-id="user-groups-setting") {{_ 'user-groups'}}
              li.active
                a.js-setting-menu(data-id="plans-setting") {{_ 'plans'}}
              li.active
                a.js-setting-menu(data-id="subscriptions-setting") {{_ 'subscriptions'}}
                  if hasExpiredSubscriptions
                    span#expiredSubscriptionsBadge
                      | {{expiredSubscriptionsCount}}
        .main-body
          if loading.get
            +spinner
          else if people.get
            +peopleGeneral
          else if roles.get
            +rolesGeneral
          else if userGroups.get
            +userGroupsGeneral
          else if plans.get
            +plansGeneral
          else if subscriptions.get
            +subscriptionsGeneral

template(name="createNewUserPopup")
  if loading.get
    +spinner
  else
    form
      label
        | {{_ 'fullname'}}
        span.error.hide.fullname-blank.user-not-created
          | {{_ 'error-fullname-blank'}}
        input.js-profile-fullname(type="text" value="" autofocus)
      label
        | {{_ 'username'}}
        span.error.hide.username-blank.user-not-created
          | {{_ 'error-username-blank'}}
        span.error.hide.username-taken.user-not-created
          | {{_ 'error-username-taken'}}
        input.js-profile-username(type="text" value="")
      label
        | {{_ 'email'}}
        span.error.hide.valid-email-not-entered.user-not-created
          | {{_ 'error-valid-email-not-entered'}}
        span.error.hide.email-taken.user-not-created
          | {{_ 'error-email-taken'}}
        input.js-profile-email(type="email" value="")
      if currentUser.isAdmin
        label
          | {{_ 'admin'}}
          select.select-role.js-profile-isadmin
            option(value="false" selected) {{_ 'no'}}
            option(value="true") {{_ 'yes'}}
      label
        | {{_ 'role'}}
        span.error.hide.role-not-selected.user-not-created
          | {{_ 'error-role-not-selected'}}
        +roleOptions
      if currentUser.hasMultipleUsableUserQuotaGroups
        label
          | {{_ 'choose-specific-quota-to-use'}}
          select.choose-specific-quota-to-use
            option(value='', selected='selected') Select One
            each usableBoardsQuotaGroup in currentUser.usableUsersQuotaGroups
              option(value='{{usableBoardsQuotaGroup._id}}') {{usableBoardsQuotaGroup.title}}
      hr
      div.buttonsContainer
        input.primary.wide(type="submit" value="{{_ 'save'}}")
        div
        input#cancelButton.primary.wide(type="button" value="{{_ 'cancel'}}")

template(name="peopleGeneral")
  button#create-user.btn.btn-primary {{_ 'add-user'}}
  table
    tbody
      tr
        th {{_ 'username'}}
        th {{_ 'fullname'}}
        th {{_ 'admin'}}
        th {{_ 'role'}}
        th {{_ 'email'}}
        th {{_ 'verified'}}
        th {{_ 'createdAt'}}
        th {{_ 'active'}}
        th {{_ 'user-groups'}}
        th {{_ 'authentication-method'}}
        th
      // If isAdmin
      if currentUser.isAdmin
        // List all the users
        each user in peopleList
          +peopleRow(userId=user._id)
      // If isManagerAndNotAdmin
      if currentUser.isManagerAndNotAdmin
        // List users from his own groups which have either the role 'Coach' or 'Coachee'
        each user in managerUserGroupsUsersAndInviteesList
          +peopleRow(userId=user._id)

      // If isCoachAndNotAdmin
      if currentUser.isCoachAndNotAdmin
        // List users from his own groups which have the role 'Coachee'
        each user in coachUserGroupsUsersAndInviteesList
          +peopleRow(userId=user._id)


template(name="peopleRow")
  tr
    td.username {{ userData.username }}
    td {{ userData.profile.fullname }}
    td
      if userData.isAdmin
        | {{_ 'yes'}}
      else
        | {{_ 'no'}}
    td {{ roleName }}
    td {{ userData.emails.[0].address }}
    td
      if userData.emails.[0].verified
        | {{_ 'yes'}}
      else
        | {{_ 'no'}}
    td {{ moment userData.createdAt 'LLL' }}
    td
      if userData.loginDisabled
        | {{_ 'no'}}
      else
        | {{_ 'yes'}}
    td
      ul
        each userGroup in assignedUserGroups
          li {{ userGroup.title }}
    td {{_ userData.authenticationMethod }}
    td
      a.edit-user
        | {{_ 'edit'}}

template(name="editUserPopup")
  if loading.get
    +spinner
  else
    form#editUserPopup
      label.hide.userId(type="text" value=user._id)
      label
        | {{_ 'fullname'}}
        input.js-profile-fullname(type="text" value=user.profile.fullname autofocus)
      label
        | {{_ 'username'}}
        span.error.hide.username-taken
          | {{_ 'error-username-taken'}}
        if isLdap
          input.js-profile-username(type="text" value=user.username readonly)
        else
          input.js-profile-username(type="text" value=user.username)
      label
        | {{_ 'email'}}
        span.error.hide.email-taken
          | {{_ 'error-email-taken'}}
        if isLdap
          input.js-profile-email(type="email" value="{{user.emails.[0].address}}" readonly)
        else
          input.js-profile-email(type="email" value="{{user.emails.[0].address}}")
      if currentUser.isAdmin
        label
          | {{_ 'admin'}}
          select.select-role.js-profile-isadmin
            option(value="false") {{_ 'no'}}
            option(value="true" selected="{{user.isAdmin}}") {{_ 'yes'}}
      label
        | {{_ 'role'}}
        +roleOptions
      label
        | {{_ 'active'}}
        select.select-active.js-profile-isactive
          option(value="false") {{_ 'yes'}}
          option(value="true" selected="{{user.loginDisabled}}") {{_ 'no'}}
      hr
      label
        | {{_ 'password'}}
        input.js-profile-password(type="password")
      div.buttonsContainer
        input.primary.wide(type="submit" value="{{_ 'save'}}")
        div
        if currentUser.isAdmin
          input#deleteButton.primary.wide(type="button" value="{{_ 'delete'}}")

template(name="roleOptions")
  select.select-role.js-profile-role
    option(value='', selected='selected') Select One
    // if isAdmin, user gets to choose from all the roles
    if currentUser.isAdmin
      each role in roles
        if currentRole role._id
          option(value='{{role._id}}' selected) {{role.name}}
        else
          option(value='{{role._id}}') {{role.name}}
    // if isManagerAndNotAdmin, user gets to choose from 'coach' or 'coachee'
    if currentUser.isManagerAndNotAdmin
      each role in coachOrCoacheeRoles
        if currentRole role._id
          option(value='{{role._id}}' selected) {{role.name}}
        else
          option(value='{{role._id}}') {{role.name}}
    // if isCoachAndNotAdmin, user gets to choose 'coachee'
    if currentUser.isCoachAndNotAdmin
      if currentRole coacheeRole._id
        option(value='{{coacheeRole._id}}' selected) {{coacheeRole.name}}
      else
        option(value='{{coacheeRole._id}}') {{coacheeRole.name}}

template(name="rolesGeneral")
  h2.listHeader {{_ 'Dots at the bottom-right of the avatar'}}:
    ul
      li.listItem {{_ 'Color "green" means "Active"'}}
      li.listItem {{_ 'Color "yellow" means "Idle"'}}
      li.listItem {{_ 'Color "grey" means "Disconnected" '}}
      li.listItem {{_ 'Color "red" means "Pending"'}}
    br
  h2.listHeader {{_ 'Avatar\'s cirle border\'s color indicates the user\'s user-role'}}:
    ul
      li.listItem {{_ 'Admins are maroon'}}
      li.listItem {{_ 'Managers are darkblue'}}
      li.listItem {{_ 'Coaches are orange'}}
      li.listItem {{_ 'Coachees are limegreen'}}
    br
  table.roleList
    tbody
      tr
        th#roleHeader {{_ 'role'}}
        th#resourceHeader {{_ 'resource'}}
        th#permissionHeader {{_ 'Permission'}}
        th#permissionDetailsHeader {{_ 'Permission Details'}}

      //- Admin's Permissions
      tr
        td.badge(rowspan="20") {{_ 'admin'}}
        //- Admin's Card Priviledges
        td.resourceCell(rowspan="4") {{_ 'cards'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed except in templates of which he is not the owner'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource except in templates of which he is not the owner'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner of the resource'}}
      tr
        //- Admin's List Priviledges
        td.resourceCell(rowspan="4") {{_ 'lists'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed except in templates of which he is not the owner'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource except in templates of which he is not the owner'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner of the resource'}}
      tr
        //- Admin's Boards Priviledges
        td.resourceCell(rowspan="4") {{_ 'Boards'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        //- Admin's Templates Priviledges
        td.resourceCell(rowspan="4") {{_ 'Templates'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner of the resource'}}
      tr
        //- Admin's User Priviledges
        td.resourceCell(rowspan="4") {{_ 'User'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}

      //- Manager's Permissions
      tr
        td.badge(rowspan="20") Manager
        //- Manager's Card Priviledges
        td.resourceCell(rowspan="4") {{_ 'cards'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
          p  {{_ 'Except in the board templates that he do not own and is just a member'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource except in templates which is not his own'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner of the resource'}}
      tr
        //- Manager's List Priviledges
        td.resourceCell(rowspan="4") {{_ 'lists'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
          p  {{_ 'Except in the board templates that he do not own and is just a member'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource except in templates which is not his own'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner of the resource'}}
      tr
        //- Manager's Boards Priviledges
        td.resourceCell(rowspan="4") {{_ 'Boards'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Not allowed'}}
          p  {{_ 'He can archive it but he cannot delete it, if he is not the owner'}}
      tr
        //- Manager's Templates Priviledges
        td.resourceCell(rowspan="4") {{_ 'Templates'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Not allowed'}}
          p  {{_ 'Except for adding members to it.'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Not allowed'}}
      tr
        //- Manager's User Priviledges
        td.resourceCell(rowspan="4") {{_ 'User'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
          p  {{_ 'But he can only create users of either of the user-role "Coach" or of the user-role "Coachee"'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
          p  {{_ 'But in the admin panel he can only see users of the user-role "Coach" and "Coachee"'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
          p  {{_ 'But he can only update users of the user-role "Coach" and "Coachee"'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Not allowed'}}
      //- Coach's Permissions
      tr
        td.badge(rowspan="20") Coach
        //- Coach's Card Priviledges
        td.resourceCell(rowspan="4") {{_ 'cards'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
          p  {{_ 'But not in templates'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the board in which the card is found.'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the board in which the card is found except in templates'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Not allowed'}}
          p  {{_ 'He can archive it but he cannot delete it, if he is not the owner'}}
      tr
        //- Coach's List Priviledges
        td.resourceCell(rowspan="4") {{_ 'lists'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
          p  {{_ 'But not in templates'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource except in templates'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed only if user is the owner of the board in which the list is found'}}
      tr
        //- Coach's Boards Priviledges
        td.resourceCell(rowspan="4") {{_ 'Boards'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Not allowed'}}
          p  {{_ 'He can archive it but he cannot delete it, if he is not the owner'}}
      tr
        //- Coach's Templates Priviledges
        td.resourceCell(rowspan="4") {{_ 'Templates'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Not allowed'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p {{_ 'Allowed'}}
          p {{_ 'But he can only see the ones that have been assigned to him and use it to create boards or assign coachees to it'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Not allowed'}}
          p  {{_ 'Except to only asssign it to coachees'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Not allowed'}}
      tr
        //- Coach's User Priviledges
        td.resourceCell(rowspan="4") {{_ 'User'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
          p  {{_ 'But he can only create users of the user-role "Coachee"'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
          p  {{_ 'But he can only update the users of the user-role "Coachee"'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
          p  {{_ 'But he can only update the users of the user-role "Coachee"'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Not allowed'}}
      //- Coachee's Permissions
      tr
        td.badge(rowspan="20") Coachee
        //- Coachee's Card Priviledges
        td.resourceCell(rowspan="4") {{_ 'cards'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
          p  {{_ 'But not in templates'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource except in templates'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        //- Coachee's List Priviledges
        td.resourceCell(rowspan="4") {{_ 'lists'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
          p  {{_ 'But not in templates'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource except in templates'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed only if user is the owner of the board in which the list is found'}}
      tr
        //- Coachee's Boards Priviledges
        td.resourceCell(rowspan="4") {{_ 'Boards'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner or a member of the resource'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell
          p {{_ 'Allowed if user is the owner or a member of the resource'}}
          p {{_ 'But if he is just a regular member, he cannot update the board title, nor add a member to it and not even update the list properties. But he can add list and cards to it and so on.'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell
          p  {{_ 'Allowed if user is the owner. But if he is a member of the baord, he can only archive it but not delete it permanently'}}
      tr
        //- Coachee's Templates Priviledges
        td.resourceCell(rowspan="4") {{_ 'Templates'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p {{_ 'Not allowed'}}
          p {{_ 'But he can be assigned to it by an Admin or a Manager or a Coach'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p {{_ 'Allowed'}}
          p {{_ 'But he can only see the ones that have been assigned to him and use it to create boards'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell {{_ 'Not Allowed'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell {{_ 'Not Allowed'}}
      tr
        //- Coachee's User Priviledges
        td.resourceCell(rowspan="4") {{_ 'User'}}
        td.permissionCell {{_ 'Create'}}
        td.permissionDetailsCell
          p {{_ 'Not allowed'}}
          p {{_ 'But he can invite existing users to his own board provided he searches for them by their names or their usernames'}}
      tr
        td.permissionCell {{_ 'Read'}}
        td.permissionDetailsCell
          p {{_ 'Allowed'}}
          p {{_ 'But he can only see them when he is searching for the user by his name or username from his board\'s sidebar while trying to add a member to his board.'}}
          p {{_ 'He does not have access to the Admin Panel and hence also not to its tab "People"'}}
      tr
        td.permissionCell {{_ 'Update'}}
        td.permissionDetailsCell {{_ 'Not allowed'}}
      tr
        td.permissionCell {{_ 'Delete'}}
        td.permissionDetailsCell {{_ 'Not allowed'}}

template(name="roleRow")
  tr
    td.rolename {{ roleData.name }}
    td
      each permission in roleData.permissions
        span.badge {{permission.group}}:
          span.access {{permission.access}}

template(name="createRolePopup")
  form
    label.hide.roleId(type="text" value=role._id)
    label
      | {{_ 'name'}} {{_id}}
      unless managerCoachOrCoacheeDoc role._id
        input.js-role-name(type="text" value=role.name autofocus)
      else
        input.js-role-name(type="text" value=role.name disabled)
    hr
    label(style="padding-top: 5px")
      span.role-color-label
        | {{_ 'color'}}
      .palette-colors: each color in colors
        if isSelected role._id color
          span.card-label.checked-palette-color.palette-color.js-palette-color(class="card-details-{{color}}" data-color="{{color}}")
            i.fa.fa-check
        else
          span.card-label.palette-color.js-palette-color(class="card-details-{{color}}" data-color="{{color}}")
    hr
    table
      tbody
        tr
          th {{_ 'permission'}}
          th {{_ 'view'}}
          th {{_ 'create'}}
          th {{_ 'change'}}
        each group in groups
          tr(data-group=group)
            td {{group}}
            td
              a.flex.js-permission(class="{{#if isEnabled role group 'fetch'}}is-checked{{/if}}", data-access="fetch")
                .materialCheckBox(class="{{#if isEnabled role group 'fetch'}}is-checked{{/if}}")
            td
              a.flex.js-permission(class="{{#if isEnabled role group 'insert'}}is-checked{{/if}}", data-access="insert")
                .materialCheckBox(class="{{#if isEnabled role group 'insert'}}is-checked{{/if}}")
            td
              a.flex.js-permission(class="{{#if isEnabled role group 'update'}}is-checked{{/if}}", data-access="update")
                .materialCheckBox(class="{{#if isEnabled role group 'update'}}is-checked{{/if}}")

    div.buttonsContainer
      input.primary.wide(type="submit" value="{{_ 'save'}}")
      div
      unless managerCoachOrCoacheeDoc role._id
        input#deleteButton.primary.wide(type="button" value="{{_ 'delete'}}")

template(name="userGroupsGeneral")
  button#create-user-group.btn.btn-primary {{_ 'create-user-group'}}
  table
    tbody
      tr
        th
          ul
            li {{_ 'title'}}
        th
          ul
            li {{_ 'users-quota'}}
        th
          ul
            li {{_ 'used-users-quota'}}
        th
          ul
            li {{_ 'boards-quota'}}
        th
          ul
            li {{_ 'used-boards-quota'}}
        th
          ul
            li {{_ 'group-admins'}}
        th
          ul
            li {{_ 'createdAt'}}
        th
          ul
            li {{_ 'action'}}
          // if isAdmin
      if currentUser.isAdmin
        each userGroup in userGroupsList
          +userGroupRow(userGroupId=userGroup._id)

template(name="userGroupRow")
  tr
    td
      ul
        li {{ userGroupData.title }}
    td
      ul
        li {{ userGroupData.usersQuota }}
    td
      ul
        li {{ userGroupData.usedUsersQuota }}
    td
      ul
        li {{ userGroupData.boardsQuota }}
    td
      ul
        li {{ userGroupData.usedBoardsQuota }}
    td
      ul
        each groupAdmin in userGroupData.groupAdmins
          li {{ groupAdmin }} <br />
    td
      ul
        li {{ moment userGroupData.createdAt 'LLL' }}
    td
      ul
        li
          a.manage-user-group(data-user-group-id=userGroupData._id)
            | {{_ 'manage'}}

template(name="createUserGroupPopup")
  if loading.get
    +spinner
  else
    form
      label
        | {{_ 'title'}}
        span.error.hide.title-blank.user-group-not-created
          | {{_ 'error-title-blank'}}
        span.error.hide.title-duplicate.user-group-not-created
          | {{_ 'error-title-duplicate'}}
        input.js-user-group-title(type="text" value="" autofocus)
      label
        | {{_ 'boards-quota'}}
        span.error.hide.boards-quota-blank.user-group-not-created
          | {{_ 'error-boards-quota-blank'}}
        input.js-user-group-boards-quota(type="text" value="")
      label
        | {{_ 'users-quota'}}
        span.error.hide.users-quota-blank.user-group-not-created
          | {{_ 'error-users-quota-blank'}}
        input.js-user-group-users-quota(type="text" value="")
      hr
      div.buttonsContainer
        input.primary.wide(type="submit" value="{{_ 'save'}}")
        div
        input#cancelUserGroupCreation.primary.wide(type="button" value="{{_ 'cancel'}}")

template(name="editUserGroup")
  #manageUserGroupBaseModal
    .modalBanner
      h4.modalLabel
        | {{_ 'manage-user-group'}}
      h2.userGroupTitle(data-user-group-id=userGroup._id data-user-group-title=userGroup.title)
        | {{userGroup.title}}
    a.manageUserGroupResponse
    hr.hrEditUserGroupForm
    if isUserGroupAmin
      .defaultSettingsBtnContainer
        button#openModalLogoSettings.btn.btn-primary(data-user-group-id=userGroup._id) {{_ 'Default Logo Settings'}}
        button#openModalBoardColorSettings.btn.btn-primary(data-user-group-id=userGroup._id) {{_ 'Default Board Color Settings'}}
      hr.hrEditUserGroupForm
    #manageUserGroupContainer
      #manageUserGroup
        #manageQuota
          label#quota
            | {{_ 'manage-quota'}}
          if loading.get
            +spinner
          form#editUserGroupPopup
            label.bold
              | {{_ 'users-quota'}}
              span.error.hide.users-quota-blank.user-group-not-edited
                | {{_ 'error-users-quota-blank'}}
              input.js-user-group-users-quota(type="text" value=userGroup.usersQuota)
            label.bold
              | {{_ 'boards-quota'}}
              span.error.hide.boards-quota-blank.user-group-not-edited
                | {{_ 'error-boards-quota-blank'}}
              input.js-user-group-boards-quota(type="text" value=userGroup.boardsQuota)
            div.editUGButtonsContainer
              input.primary.wide(type="submit" value="{{_ 'save'}}")
        #manageMembers.bold
          label#memberLabel
            | {{_ 'manage-members'}}
          if canAddMoreMember
            label
              | {{_ 'add-member'}}
              select#js-select-user
                option(value='', selected='selected') Select One
                each user in notUserGroupMember
                  option(value=user._id) {{user.username}}
          .membersList(class="listProperties{{#if lessThan4Members}} displayContents{{else}} displayGrid{{/if}}")
            if hasUsersAssignedToIt
              each user in users
                .fa.fa-circle.listIndicator
                  span.memberListComponent {{user.username}}
                  a.buttonRemoveMember(data-user-id=user._id) {{_ 'remove'}}
                    .fa.fa-times-circle
            else
              .fa.fa-circle.listIndicator
                span.memberListComponent {{_ 'none'}}
        #manageGroupAdmin
          label#groupAdminLabel
            | {{_ 'manage-group-admin'}}
          if canAddMoreGroupAdmin
            label.bold
              | {{_ 'add-group-admin'}}
              select#js-select-group-admin
                option(value='', selected='selected') Select One
                each userGroupNonAdmin in userGroupNonAdmins
                  option(value=userGroupNonAdmin._id) {{userGroupNonAdmin.username}}
          #groupAdminslist(class="listProperties{{#if lessThan4GroupAdmins}} displayContents{{else}} displayGrid{{/if}}")
            if hasGroupAdmin
              each groupAdmin in userGroupAdmins
                .fa.fa-circle.listIndicator
                  span.groupAdminListComponent {{groupAdmin.username}}
                  a.unsetUserGroupAdmin(data-user-id=groupAdmin._id) {{_ 'unset'}}
                    .fa.fa-times-circle
            else
              .fa.fa-circle.listIndicator
                span.groupAdminListComponent {{_ 'none'}}
      if notAsssignedToAnyUser
        hr.hrEditUserGroupForm
        input#deleteUGButton.primary.wide.pull-right(type="button" value="{{_ 'delete-user-group'}}")

  #manageUserGroupLogo.hide
    button.btn.secondary.goBackToManageUserGroupBaseModal
      i.fa.fa-chevron-left
      | {{{_ 'back'}}}
    .modalBanner
      h4.modalLabel
        | {{userGroup.title}}
      h2.userGroupTitle(data-user-group-id=userGroup._id data-user-group-title=userGroup.title)
        | {{_ 'Logo Settings'}}
    a.manageUserGroupResponse
    hr.hrEditUserGroupForm
    if hasLogo
      #uploadedLogoContainer
        img.logo.logo-image(src="{{logoUrl(userGroup._id)}}")
    input.hide.uploadLogoInput(accept="image/*;capture=camera" type="file")
    button.full.uploadLogo
      i.fa.fa-upload
      | {{_ 'Upload logo'}}
    #logoMaxSizseMessageContainer
      label(style="margin-top: 5px;")
        | {{_ '(Logo needs to be 100 kb or less)'}}
    if error.get
      .warning {{_ error.get}}
    hr.hrEditUserGroupForm
    label#memberLabel
      | {{_ 'Use this User-Group\'s logo for the Members'}}
    .userGroupMembers.scrollableMembersList
      table
        tbody
          if hasUsersAssignedToIt
            each user in users
              tr
                td
                  .userGroupMembersListIndicator
                    .fa.fa-circle(style="line-height: 12px;")
                    label.bold.userGroupMemberListComponent
                      | {{user.username}}
                td
                  .choiceCell
                    input.form-control.setOrUnsetUserGroupLogoForMember(type="radio" name="setOrUnsetUserGroupLogoForMember{{user._id}}" data-user-id=user._id value="Yes" checked="{{#if useCustomDefaultLogo (user._id)}}checked{{/if}}")
                    span.setOrUnsetUserGroupLogoForUser
                      | {{_ 'Yes'}}
                    input.form-control.setOrUnsetUserGroupLogoForMember(type="radio" name="setOrUnsetUserGroupLogoForMember{{user._id}}" data-user-id=user._id value="No" checked="{{#unless useCustomDefaultLogo (user._id)}}checked{{/unless}}")
                    span.setOrUnsetUserGroupLogoForUser
                      | {{_ 'No'}}
          else
            tr
              td
                .fa.fa-circle.userGroupMembersListIndicator
                  span.memberListComponent {{_ 'none'}}

  #manageUserGroupBoardColor.hide
    button.btn.secondary.goBackToManageUserGroupBaseModal
      i.fa.fa-chevron-left
      | {{{_ 'back'}}}
    .modalBanner
      h4.modalLabel
        | {{userGroup.title}}
      h2.userGroupTitle(data-user-group-id=userGroup._id data-user-group-title=userGroup.title)
        | {{_ 'Board Color Settings'}}
    a.manageUserGroupResponse
    hr.hrEditUserGroupForm
    label#memberLabel
      | {{_ 'Use this Default Board Color for the Members'}}
    .userGroupMembers.scrollableMembersList
      table
        tbody
          if hasUsersAssignedToIt
            each user in users
              tr
                td
                  .userGroupMembersListIndicator
                    .fa.fa-circle(style="line-height: 12px;")
                    label.bold.userGroupMemberListComponent
                      | {{user.username}}
                td
                  .choiceCell
                    input.form-control.setOrUnsetUserBoardColorForMember(type="radio" name="defaultBoardColor{{user._id}}" data-user-id=user._id value="Yes")
                    span.setOrUnsetUserBoardColorForUser
                      | {{_ 'Yes'}}
                    input.form-control.setOrUnsetUserBoardColorForMember(type="radio" name="defaultBoardColor{{user._id}}" data-user-id=user._id value="No")
                    span.setOrUnsetUserBoardColorForUser
                      | {{_ 'No'}}
          else
            tr
              td
                .fa.fa-circle.userGroupMembersListIndicator
                  span.memberListComponent {{_ 'none'}}
    


template(name="plansGeneral")
  table
    tbody
      tr
        th {{_ 'title'}}
        th {{_ 'users-quota'}}
        th {{_ 'boards-quota'}}
        th {{_ 'price-per-month'}}
        th {{_ 'price-per-year'}}
      if currentUser.isAdmin
        each plan in plans
          +planRow(planId=plan._id)

template(name="planRow")
  tr
    td {{ plan.title }}
    td {{ plan.usersQuota }}
    td {{ plan.boardsQuota }}
    td {{_'€'}} {{ plan.pricePerMonth }}
    td {{_'€'}} {{ plan.pricePerYear }}

template(name="subscriptionsGeneral")
  button#add-subscription.btn.btn-primary {{_ 'add-subscription'}}
  table#subscriptionsDataTable
    tbody
      tr
        th {{_ 'subscriber'}}
        th {{_ 'plan'}}
        th {{_ 'user-group'}}
        th {{_ 'subscribed-on'}}
        th {{_ 'expires-on'}}
        th {{_ 'billing-cycle'}}
        th {{_ 'action'}}
      if currentUser.isAdmin
        each subscription in subscriptions
          +subscriptionRow(subscriptionId=subscription._id)

template(name="subscriptionRow")
  tr(id=subscription._id)
    td {{ subscription.subscriberUsername }}
    td {{ subscription.planTitle }}
    td {{ subscription.userGroupTitle }}
    td {{ moment subscription.subscribedOn 'LL' }}
    td {{ moment subscription.expiresOn 'LL' }}
    td {{_ subscription.billingCycle}}
    td#subscriptionsActionCol
      a.renewSubscription(data-subscription-id=subscription._id)
        | {{_ 'renew'}}
      a.upgradeSubscription(data-subscription-id=subscription._id)
        | {{_ 'upgrade'}}
      a.archiveSubscription(data-subscription-id=subscription._id)
        | {{_ 'cancel'}}

template(name="addSubscriptionPopup")
  if loading.get
    +spinner
  else
    form
      label
        | {{_ 'plan'}}
        .plan-error-msg.newSubscriptionErrorMsg.error-msg.hide {{_ 'error-plan-not-selected'}}
        select.select-a-plan
          option(value='', selected='selected') Select One
          each plan in plans
            option(value='{{plan._id}}') {{plan.title}}
      label
        | {{_ 'billing-cycle'}}
        .billing-cycle-error-msg.newSubscriptionErrorMsg.error-msg.hide {{_ 'error-billing-cycle-not-selected'}}
        select.select-billing-cycle
          option(value='', selected='selected') Select One
          option(value='monthly') {{_ 'monthly'}}
          option(value='yearly') {{_ 'yearly'}}
      // select user and have the usergroup dropdown options be only of the selected user's user groups
      label
        | {{_ 'subscriber'}}
        #subscriber-error-msg.newSubscriptionErrorMsg.error-msg.hide {{_ 'error-subscriber-not-selected'}}
        select#select-subscriber
          option(value='', selected='selected') Select One
          each user in users
            option(value='{{user._id}}') {{user.username}}
      label
        | {{_ 'user-group'}}
        #already-assigned-user-group-to-subscription.newSubscriptionErrorMsg.error-msg.hide {{_ 'error-userGroupAlreadyAssignedToSubscription'}}
        #already-assigned-user-groups-to-subscriptions.newSubscriptionErrorMsg.error-msg.hide {{_ 'error-userGroupsAlreadyAssignedToSubscriptions'}}
        #user-group-error-msg.newSubscriptionErrorMsg.error-msg.hide {{_ 'error-user-not-part-of-any-usergroups'}}
        #user-group-not-selected.newSubscriptionErrorMsg.error-msg.hide {{_ 'error-userGroupNotSelected'}}
        select#select-a-user-group(disabled)
      hr
      div.buttonsContainer
        input#saveNewSubscription.primary.wide(disabled type="submit" value="{{_ 'save'}}")
        div
        input#cancelButton.primary.wide(type="button" value="{{_ 'cancel'}}")

template(name="upgradeSubscriptionPopup")
  if loading.get
    +spinner
  else
    form#upgradeSubscriptionForm
      input#upgradeSubscriptionHiddenInput
      p.center.bold
        | {{_ 'subscriber'}}
        | :
        span.upgradeSubscriptionFormTitle
          | {{subscription.subscriberUsername}}
      p.center.bold
        | {{_ 'user-group'}}
        | :
        span.upgradeSubscriptionFormTitle
          | {{subscription.userGroupTitle}}
      hr
      label
        | {{_ 'plan'}}
        .plan-error-msg.upgradeSubscriptionErrorMsg.error-msg.hide {{_ 'error-plan-not-selected'}}
        select.select-a-plan
          option(value='', selected='selected') Select One
          each plan in plans
            option(value='{{plan._id}}') {{plan.title}}
      label
        | {{_ 'billing-cycle'}}
        .billing-cycle-error-msg.upgradeSubscriptionErrorMsg.error-msg.hide {{_ 'error-billing-cycle-not-selected'}}
        select.select-billing-cycle
          option(value='', selected='selected') Select One
          option(value='monthly') {{_ 'monthly'}}
          option(value='yearly') {{_ 'yearly'}}
      hr
      div.buttonsContainer
        input#upgradeSubscription.primary.wide(type="submit" value="{{_ 'save'}}")
        div
        input#cancelButton.primary.wide(type="button" value="{{_ 'cancel'}}")

